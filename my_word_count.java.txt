import java.util.ArrayList;
import java.util.Comparator;
import java.util.Collections;
import java.util.TreeMap;
public class WordCount {
   /**
    * It Represents the data that we need about a specific word:  the word and
    * and its occurances 
    */
   private static class WordData { 
      String word;
      int count;
      WordData(String w) {
         // Constructor for creating a WordData object when
         // we encounter a new word.
         word = w;
         count = 1;  // The initial value of count is 1.
      }
   } // end class WordData

  /**
    * Comparator is used here for comparing of objects according to their counts which is of type WordData.  
    * This is used for sorting list of words by frequency.
    */
   private static class CountCompare implements Comparator<WordData> {
      public int compare(WordData data1, WordData data2) {
         return data2.count - data1.count;
             // The return value is positive if data2.count > data1.count.
             // i.e,. data1 comes after data2 in the ordering if there
             // were more occurrences of data2.word than of data1.word.
             // The words are sorted according to decreasing counts.
      }
   } // end class CompareCount
   public static void main(String[] args) {
      System.out.println("\n\n   This program will ask you to select an input file");
      TextIO.getln();  // Wait for user to press return.
      try {
              if (TextIO.readUserSelectedFile() == false) {
            System.out.println("No input file selected.  Exiting.");
            System.exit(1);
         }         
         // Create a TreeMap to hold the data.  Read the file and record
         // data in the map about the words that are found in the file.
         TreeMap<String,WordData> words = new TreeMap<String,WordData>();
         String word = readNextWord();
         while (word != null) {
            word = word.toLowerCase();  // convert word to lower case
            WordData data = words.get(word);
            if (data == null)
               words.put( word, new WordData(word) );
            else
               data.count++;
            word = readNextWord();
         }     
         System.out.println();
         if (words.size() == 0) {
          System.exit(0);
         }         
         // Copy the word data into an array list, and sort the list
         // into order of decreasing frequency.
          ArrayList<WordData> wordsByFrequency = new ArrayList<WordData>( words.values() );
         Collections.sort( wordsByFrequency, new CountCompare() );
         
         // Output the data from the map and from the list.       
         TextIO.writeUserSelectedFile(); // If user cancels, output automatically
                                         // goes to standard output. 
         TextIO.putln("\n\nList of words by frequency of occurence:\n");
         for ( WordData data : wordsByFrequency )
            TextIO.putln("   " + data.word + " (" + data.count + ")");
         }
      catch (Exception e) {
         System.out.println("Sorry, an error has occurred.");
         System.out.println("Error Message:  " + e.getMessage());
         e.printStackTrace();
      }
      System.exit(0);  // Might be necessary, because of use of file dialogs.
   }

   /**
    * A word is defined as a sequence of letters.  Also, a word can include
    * an apostrophe if the apostrophe is surrounded by letters on each side.
    * @return the next word from TextIO, or null if an end-of-file is encountered
    */
   private static String readNextWord() {
      char ch = TextIO.peek(); // Look at next character in input.
      while (ch != TextIO.EOF && ! Character.isLetter(ch)) {
         TextIO.getAnyChar();  // Read the character.
         ch = TextIO.peek();   // Look at the next character.
      }
      if (ch == TextIO.EOF) // Encountered end-of-file
         return null;
      // At this point, we know that the next character, so read a word.
      String word = "";  // This will be the word that is read.
      while (true) {
         word += TextIO.getAnyChar();  // Append the letter onto word.
         ch = TextIO.peek();  // Look at next character.
         if ( ch == '\'' ) {
               //  If the character after the apostrophe
                // is not a letter, the word is done, so break out of the loop.
            TextIO.getAnyChar();   // Read the apostrophe.
            ch = TextIO.peek();    // Look at char that follows apostrophe.
            if (Character.isLetter(ch)) {
               word += "\'" + TextIO.getAnyChar();
               ch = TextIO.peek();  // Look at next char.
            }
            else
               break;
         }
         if ( ! Character.isLetter(ch) ) {
                // If the next character is not a letter, the word is
                // finished, so bread out of the loop.
            break;
         }
         // If we haven't broken out of the loop, next char is a letter.
      }
      return word;  // Return the word that has been read.
   }
} // end class WordCount

